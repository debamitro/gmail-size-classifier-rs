<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gmail Cleaner</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .search-container {
            margin-bottom: 20px;
        }
        .results {
            list-style: none;
            padding: 0;
        }
        .result-item {
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .loading {
            display: none;
            color: #666;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-center mb-8">Gmail Cleaner</h1>
        <div id="profileText"></div>
        <div class="search-container text-center mb-6">
            <label for="maxMessages">Maximum Messages: </label>
            <input type="number" id="maxMessages" placeholder="maximum messages">
            <button onclick="performSearch()" class="bg-blue-500 text-white px-4 py-2 rounded">Classify</button>
            <span id="loading" class="loading">Loading...</span>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-lg p-6">
                <canvas id="emailSizePieChart" height="300"></canvas>
            </div>

            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Size Classifications</h2>
                <ul class="list-disc pl-6">
                    <li><span class="font-medium">Small:</span> Less than 100KB</li>
                    <li><span class="font-medium">Medium:</span> Between 100KB and 1MB</li>
                    <li><span class="font-medium">Large:</span> 1MB or larger</li>
                </ul>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Small Emails</h2>
                <div class="mb-4 text-gray-600">
                    <p id="small-count">Count: 0</p>
                    <p id="small-size">Total size: 0 KB</p>
                </div>
                <div class="space-y-3" id="small-results"></div>
            </div>
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Medium Emails</h2>
                <div class="mb-4 text-gray-600">
                    <p id="medium-count">Count: 0</p>
                    <p id="medium-size">Total size: 0 KB</p>
                </div>
                <div class="space-y-3" id="medium-results"></div>
            </div>
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Large Emails</h2>
                <div class="mb-4 text-gray-600">
                    <p id="large-count">Count: 0</p>
                    <p id="large-size">Total size: 0 KB</p>
                </div>
                <div class="space-y-3" id="large-results"></div>
            </div>
        </div>

    <script>
        function formatSize(sizeInB) {
            const sizeInKB = sizeInB / 1024;
            if (sizeInKB >= 1024) {
                return `${(sizeInKB / 1024).toFixed(2)} MB`;
            }
            return `${sizeInKB.toFixed(2)} KB`;
        }

        function createMessageElement(item) {
            const div = document.createElement('div');
            div.className = 'border-b pb-2';
            const link = document.createElement('a');
            link.href = `https://mail.google.com/mail/u/0/#all/${item.thread_id}`;
            link.target = '_blank';
            const message_subject = document.createElement('p');
            message_subject.className = 'font-medium truncate';
            message_subject.textContent = item.title;
            link.appendChild(message_subject);
            const message_size = document.createElement('p');
            message_size.className = 'text-sm text-gray-600';
            message_size.textContent = `Size: ${formatSize(item.size)}`;
            div.appendChild(link);
            div.appendChild(message_size);
            return div;
        }

        function updateStats(category, messages) {
            const countElement = document.getElementById(`${category}-count`);
            const sizeElement = document.getElementById(`${category}-size`);
            const totalSize = messages.reduce((sum, item) => sum + item.size, 0);
            countElement.textContent = `Count: ${messages.length}`;
            sizeElement.textContent = `Total size: ${formatSize(totalSize)}`;
        }

        function performSearch() {
            const searchInput = document.getElementById('maxMessages');
            const loading = document.getElementById('loading');
            loading.style.display = 'inline';
            
            // Clear all results
            document.getElementById('small-results').innerHTML = '';
            document.getElementById('medium-results').innerHTML = '';
            document.getElementById('large-results').innerHTML = '';
            
            fetch(`/api/summary?max=${encodeURIComponent(maxMessages.value)}`)
                .then(response => response.json())
                .then(data => {
                    loading.style.display = 'none';
                    
                    // Categorize messages
                    const categories = {
                        small: data.filter(item => item.size < 100 * 1024),
                        medium: data.filter(item => item.size >= 100 * 1024 && item.size < 1024 * 1024),
                        large: data.filter(item => item.size >= 1024 * 1024)
                    };
                    
                    // Update each category
                    Object.entries(categories).forEach(([category, messages]) => {
                        const container = document.getElementById(`${category}-results`);
                        messages.forEach(item => {
                            container.appendChild(createMessageElement(item));
                        });
                        updateStats(category, messages);
                    });

                    // Update pie chart
                    const ctx = document.getElementById('emailSizePieChart').getContext('2d');
                    new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: ['Small (<100KB)', 'Medium (100KB-1MB)', 'Large (>1MB)'],
                            datasets: [{
                                data: [
                                    categories.small.length,
                                    categories.medium.length,
                                    categories.large.length
                                ],
                                backgroundColor: ['#4CAF50', '#FFC107', '#F44336']
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'bottom'
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    loading.style.display = 'none';
                    console.error('Error:', error);
                    ['small', 'medium', 'large'].forEach(category => {
                        document.getElementById(`${category}-results`).innerHTML = 'Error fetching results';
                    });
                });
        }

        document.addEventListener('DOMContentLoaded', () => {
            const profileText = document.getElementById('profileText');
            fetch('/api/profile')
            .then(response => response.json())
            .then(data => {
                profileText.innerText = 'Logged in as ' + data.email;
            })
            .catch(error => {

            });
        })
    </script>
</body>
</html>
