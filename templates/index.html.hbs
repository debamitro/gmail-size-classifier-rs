<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gmail Cleaner</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .main-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            overflow: hidden;
        }
        .header-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        .search-container {
            background: #f8fafc;
            padding: 2rem;
            border-bottom: 1px solid #e2e8f0;
        }
        .tab-header {
            background: #f1f5f9;
            border-bottom: 2px solid #e2e8f0;
        }
        .tab-button {
            padding: 1rem 1.5rem;
            cursor: pointer;
            transition: all 0.2s;
            border-bottom: 3px solid transparent;
            font-weight: 500;
        }
        .tab-button:hover {
            background: #e2e8f0;
        }
        .tab-button.active {
            background: white;
            border-bottom-color: #3b82f6;
            color: #3b82f6;
        }
        .message-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 0.75rem;
            transition: all 0.2s;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }
        .message-card:hover {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transform: translateY(-1px);
        }
        .size-badge {
            background: #3b82f6;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        .loading {
            display: none;
            color: #64748b;
        }
        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 8px -1px rgba(0, 0, 0, 0.15);
        }
        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        .input-field {
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 0.75rem;
            font-size: 1rem;
            transition: border-color 0.2s;
        }
        .input-field:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="header-section">
            <div id="profileText" class="absolute top-4 right-4 text-white/80 text-sm"></div>
            <h1 class="text-4xl font-bold mb-2">Gmail Cleaner</h1>
            <p class="text-white/80 text-lg">Organize your inbox by email size</p>
            <p class="text-white/60 text-sm mt-1">version 0.1-beta</p>
        </div>
        
        <div class="search-container">
            <div class="max-w-md mx-auto">
                <label for="maxMessages" class="block text-sm font-medium text-gray-700 mb-2">Maximum Messages to Analyze</label>
                <div class="flex gap-3">
                    <input type="number" id="maxMessages" placeholder="Enter number (max 50)" min="1" max="50" value="20" class="input-field flex-1">
                    <button id="searchButton" onclick="performSearch()" class="btn-primary">Classify Emails</button>
                </div>
                <div class="mt-3 text-center">
                    <span id="loading" class="loading inline-flex items-center gap-2">
                        <svg class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
                        </svg>
                        Analyzing emails...
                    </span>
                </div>
            </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-lg p-6">
                <canvas id="emailSizePieChart" height="300"></canvas>
            </div>

            <div class="bg-white rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Size Classifications</h2>
                <ul class="list-disc pl-6">
                    <li><span class="font-medium">Small:</span> Less than 100KB</li>
                    <li><span class="font-medium">Medium:</span> Between 100KB and 1MB</li>
                    <li><span class="font-medium">Large:</span> 1MB or larger</li>
                </ul>
            </div>
        </div>

        <div class="flex flex-col">
            <div class="tab-header flex">
                <div class="tab-button flex-1 text-center" id="small-heading">Small Emails</div>
                <div class="tab-button flex-1 text-center" id="medium-heading">Medium Emails</div>
                <div class="tab-button flex-1 text-center" id="large-heading">Large Emails</div>
            </div>
            <div id="small-tab" class="bg-white rounded-lg shadow-lg p-6 hidden">
                <h2 class="text-xl font-semibold mb-4">Small Emails</h2>
                <div class="mb-4 text-gray-600">
                    <p id="small-count">Count: 0</p>
                    <p id="small-size">Total size: 0 KB</p>
                </div>
                <div class="space-y-3" id="small-results"></div>
            </div>
            <div id="medium-tab"class="bg-white rounded-lg shadow-lg p-6 hidden">
                <h2 class="text-xl font-semibold mb-4">Medium Emails</h2>
                <div class="mb-4 text-gray-600">
                    <p id="medium-count">Count: 0</p>
                    <p id="medium-size">Total size: 0 KB</p>
                </div>
                <div class="space-y-3" id="medium-results"></div>
            </div>
            <div id="large-tab" class="bg-white rounded-lg shadow-lg p-6 hidden">
                <h2 class="text-xl font-semibold mb-4">Large Emails</h2>
                <div class="mb-4 text-gray-600">
                    <p id="large-count">Count: 0</p>
                    <p id="large-size">Total size: 0 KB</p>
                </div>
                <div class="space-y-3" id="large-results"></div>
            </div>
        </div>

    <script>
        function formatSize(sizeInB) {
            const sizeInKB = sizeInB / 1024;
            if (sizeInKB >= 1024) {
                return `${(sizeInKB / 1024).toFixed(2)} MB`;
            }
            return `${sizeInKB.toFixed(2)} KB`;
        }

        function createMessageElement(item) {
            const div = document.createElement('div');
            div.className = 'message-card';
            
            const flexContainer = document.createElement('div');
            flexContainer.className = 'flex items-center justify-between';
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'flex-1 min-w-0';
            
            const link = document.createElement('a');
            link.className = 'text-gray-900 hover:text-blue-600 transition-colors';
            link.href = `https://mail.google.com/mail/u/0/#all/${item.thread_id}`;
            link.target = '_blank';
            
            const message_subject = document.createElement('p');
            message_subject.className = 'font-semibold truncate text-lg';
            message_subject.textContent = item.title;
            
            const sizeSpan = document.createElement('span');
            sizeSpan.className = 'size-badge';
            sizeSpan.textContent = formatSize(item.size);
            
            link.appendChild(message_subject);
            contentDiv.appendChild(link);
            flexContainer.appendChild(contentDiv);
            flexContainer.appendChild(sizeSpan);
            div.appendChild(flexContainer);
            
            return div;
        }

        function updateStats(category, messages) {
            const countElement = document.getElementById(`${category}-count`);
            const sizeElement = document.getElementById(`${category}-size`);
            const totalSize = messages.reduce((sum, item) => sum + item.size, 0);
            countElement.textContent = `Count: ${messages.length}`;
            const formattedSize = formatSize(totalSize);
            sizeElement.textContent = `Total size: ${formattedSize}`;
            const headingElement = document.getElementById(`${category}-heading`);
            headingElement.textContent = `${category} (${formattedSize})`;
        }

        function switchTab (category) {
            ['small','medium','large'].forEach(cat => {
                const tabElement = document.getElementById(`${cat}-tab`);
                const headingElement = document.getElementById(`${cat}-heading`);
                
                if (cat === category) {
                    tabElement.classList.remove('hidden');
                    headingElement.classList.add('active');
                }
                else {
                    tabElement.classList.add('hidden');
                    headingElement.classList.remove('active');
                }
            })
        }
        function performSearch() {
            const searchInput = document.getElementById('maxMessages');
            const loading = document.getElementById('loading');
            loading.style.display = 'inline';
            const searchButton = document.getElementById('searchButton');
            searchButton.disabled = true;
            searchInput.disabled = true;
            
            // Clear all results
            document.getElementById('small-results').innerHTML = '';
            document.getElementById('medium-results').innerHTML = '';
            document.getElementById('large-results').innerHTML = '';

            fetch(`/api/summary?max=${encodeURIComponent(searchInput.value < 51 ? searchInput.value : 50)}`)
                .then(response => response.json())
                .then(data => {
                    loading.style.display = 'none';

                    // Categorize messages
                    const categories = {
                        small: data.filter(item => item.size < 100 * 1024),
                        medium: data.filter(item => item.size >= 100 * 1024 && item.size < 1024 * 1024),
                        large: data.filter(item => item.size >= 1024 * 1024)
                    };
                    
                    // Update each category
                    Object.entries(categories).forEach(([category, messages]) => {
                        const container = document.getElementById(`${category}-results`);
                        messages.forEach(item => {
                            container.appendChild(createMessageElement(item));
                        });
                        updateStats(category, messages);
                    });

                    // Update pie chart
                    const ctx = document.getElementById('emailSizePieChart').getContext('2d');
                    new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: ['Small (<100KB)', 'Medium (100KB-1MB)', 'Large (>1MB)'],
                            datasets: [{
                                data: [
                                    categories.small.length,
                                    categories.medium.length,
                                    categories.large.length
                                ],
                                backgroundColor: ['#4CAF50', '#FFC107', '#F44336']
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'bottom'
                                }
                            }
                        }
                    });
                    
                    // Default to small tab and re-enable controls
                    switchTab('small');
                    searchButton.disabled = false;
                    searchInput.disabled = false;
                })
                .catch(error => {
                    loading.style.display = 'none';
                    console.error('Error:', error);
                    ['small', 'medium', 'large'].forEach(category => {
                        document.getElementById(`${category}-results`).innerHTML = 'Error fetching results';
                    });
                    
                    // Re-enable controls after error
                    searchButton.disabled = false;
                    searchInput.disabled = false;
                });
        }

        document.addEventListener('DOMContentLoaded', () => {
            ['small','medium','large'].forEach(category => {
                const heading = document.getElementById(`${category}-heading`);
                heading.addEventListener('click', () => {
                    switchTab(category);
                });
            });
            const profileText = document.getElementById('profileText');
            fetch('/api/profile')
            .then(response => response.json())
            .then(data => {
                profileText.innerHTML = '<a href="https://gmail.com" class="hover:underline">' + data.email + '</a>';
            })
            .catch(error => {

            });
        })
    </script>
</body>
</html>
